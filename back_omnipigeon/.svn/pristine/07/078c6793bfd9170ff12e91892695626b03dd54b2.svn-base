package com.omni.rest.controller;

import com.omni.core.exceptions.OmniException;
import com.omni.core.model.*;
import com.omni.core.service.*;
import com.omni.core.utils.OmniCoreUtils;
import static com.omni.rest.controller.AbstractController.LOGGER;
import com.omni.rest.dto.ClientDto;
import com.omni.rest.dto.OrganisationDto;
import java.util.List;
import java.util.stream.Collectors;
//import com.omni.rest.view.OmniJsonView;
//import com.fasterxml.jackson.annotation.JsonView;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestBody;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.SessionAttributes;

@Controller
@RequestMapping("/client")
@SessionAttributes("currentClient")
public class ClientController extends AbstractController {

    private static final Logger logger = OmniCoreUtils.getLogger(ClientController.class);

    @ModelAttribute("currentClient")
    public Client getCurrentClient() {
        final User user;
        user = userService.getUserByEmail(SecurityContextHolder.getContext().getAuthentication().getName());
        final Client client = clientService.findClientByUser(user);
        return client;
    }

    @ModelAttribute("currentUser")
    public User getCurrentUser() {
        final User user;
        user = userService.getUserByEmail(SecurityContextHolder.getContext().getAuthentication().getName());
        return user;
    }

    @Autowired
    private UserService userService;
    @Autowired
    private ClientService clientService;

    //Update client info
    @RequestMapping(value = "/save", method = {RequestMethod.PUT})
    @ResponseBody
    public ClientDto updateClient(
            @RequestBody ClientDto client,
            @ModelAttribute("currentUser") User currentUser,
            @ModelAttribute("currentClient") Client currentClient
    ) {
        // Reject subscription with mail already in db
        if (!client.getUser().getEmail().equalsIgnoreCase(currentUser.getEmail())) {
            if (userService.verifyEmailExiste(client.getUser().getEmail())) {
                return null;
            }
        }
        //Get originals data
        client.setClientId(currentClient.getClientId());
        client.getUser().setUserId(currentUser.getUserId());
        client.getUser().setPassword(currentUser.getPassword());
        client.getUser().setFlagUser(currentUser.getFlagUser());
        client.getUser().setRefUser(currentUser.getRefUser());
        client.getUser().setInitial(currentUser.isClient() ? client.getPrenom().substring(0, 1).toUpperCase() : currentUser.getInitial());
        Client clientModel = mapper.map(client, Client.class);

        return mapper.map(clientService.save(clientModel), ClientDto.class);
    }

    @RequestMapping(value = "/currentClient", method = {RequestMethod.GET, RequestMethod.OPTIONS})
    @ResponseBody
//    @JsonView({OmniJsonView.ClientView.class})
    public ClientDto currentCient(
            @ModelAttribute("currentClient") Client currentClient,
            HttpServletRequest request,
            HttpServletResponse response
    ) throws OmniException {
        return mapper.map(clientService.findClientById(currentClient.getClientId()), ClientDto.class);
    }
    
      @RequestMapping(value = "/all", method = {RequestMethod.GET, RequestMethod.OPTIONS})
    @ResponseBody
    public List<ClientDto> getClients(HttpServletRequest request, HttpServletResponse response) throws OmniException {
        LOGGER.debug("ClientController - getClient");
        List<Client> clients = clientService.findAll();
        return clients.stream()
                .map(this::convertToClientDto)
                .collect(Collectors.toList());
    }
    
    private ClientDto convertToClientDto(Client client) {
        return mapper.map(client, ClientDto.class);
    }

}
